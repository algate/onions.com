{"version":3,"sources":["component/ClickCounter/ClickCounter.js","component/ControlPanel/Counter.js","component/ControlPanel/ControlPanel.js","component/ColorOrganizer/AddColorForm.js","component/ColorOrganizer/StarRating.js","component/ColorOrganizer/ColorList.js","component/ColorOrganizer/ColorOrganizer.js","config/Router.js","serviceWorker.js","index.js"],"names":["ClickCounter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickButton","bind","assertThisInitialized","state","count","setState","react_default","a","createElement","className","button_default","type","size","onClick","Component","Counter","onClickIncrementButton","onClickDecrementButton","initValue","updateCount","isIncrement","previousValue","newValue","onUpdate","caption","style","marginBottom","margin","nextProps","nextState","defaultProps","f","ControlPanel","onCounterUpdate","initValues","initSum","reduce","b","sum","valueChange","_this2","ControlPanel_Counter","ghost","forceUpdate","AddColorForm","_title","_color","submit","onChangeTitle","onChangeColor","e","target","value","_this$state","onNewColor","onSubmit","input_default","ref","node","_titleInput","onChange","placeholder","required","_colorInput","StarRating","totalStars","onRate","i","_this$props","starsSelected","starColor","toConsumableArray","Array","map","n","key","backgroundColor","ColorList","_ref","_ref$colors","colors","_ref$onRemove","onRemove","_ref$onRate","rating","length","color","title","hue","id","console","log","StarRating_StarRating","ColorOrganizer","addColor","removeColor","prevState","concat","v4","filter","objectSpread","AddColorForm_AddColorForm","component_ColorOrganizer_ColorList","Routes","HashRouter","Link","to","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","render","component_ClickCounter_ClickCounter","component_ControlPanel_ControlPanel","ColorOrganizer_ColorOrganizer","Router","document","querySelector","getElementById","onclick","__webpack_require__","then","module","fn","default","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bddcaca5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'antd';\nclass ClickCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.onClickButton = this.onClickButton.bind(this);\n    this.state = {\n      count: 0\n    };\n  }\n  onClickButton () {\n    this.setState({count: this.state.count + 1});\n  }\n  render() {\n    return (\n      <div className=\"region\">\n        <Button type=\"primary\" size=\"small\" onClick={this.onClickButton}>Click me!</Button>\n        <div>\n          click count: {this.state.count}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ClickCounter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// import { Button } from 'antd-mobile';\nimport { Button } from 'antd';\n\nclass Counter extends Component {\n  // 1.创建组件类实例\n    // 1.1一初始化state\n    // 1.2绑定成员函数的this环境\n  constructor(props) {\n    super(props);\n    this.onClickIncrementButton = this.onClickIncrementButton.bind(this);\n    this.onClickDecrementButton = this.onClickDecrementButton.bind(this);\n    this.state = {\n      count: props.initValue\n    };\n    // console.log('enter constructor:' + this.props.caption);\n  }\n  /*onClickIncrementButton () {\n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n  onClickDecrementButton () {\n    this.setState({\n      count: this.state.count - 1\n    })\n  }*/\n  onClickIncrementButton () {\n    this.updateCount(true);\n  }\n  onClickDecrementButton () {\n    this.updateCount(false);\n  }\n  updateCount(isIncrement) {\n    const previousValue = this.state.count;\n    const newValue = isIncrement ? previousValue + 1 : previousValue - 1;\n    this.setState({count: newValue});\n    this.props.onUpdate(newValue, previousValue);\n  }\n  // 2.render函数之前被调用就是将要装载的时候\n  componentWillMount() {\n    // console.log('enter componentWillMount:' + this.props.caption);\n  }\n  // 3.render函数不做实际的渲染动作，只是返回一个jsx描述的机构，交给react库来渲染\n  render() {\n    const {caption} = this.props;\n    // ES6 的解构赋值语法，从this.props 中获得了名为 caption 的 prop 值\n    // console.log('enter render:' + caption);\n    return (\n      <div style={{marginBottom: \"10px\"}}>\n        <Button type=\"primary\" size=\"small\" onClick={this.onClickIncrementButton}> + </Button>\n        <span style={{margin: \"0 10px\"}}>{caption} count: {this.state.count}</span>        \n        <Button type=\"primary\" size=\"small\" onClick={this.onClickDecrementButton}> - </Button>\n      </div>\n    );\n  }\n  // 4.render函数返回的jsx描述结构渲染之后，即组件已经被装载到DOM树上\n  componentDidMount() {\n    // console.log('enter componentDidMount:' + this.props.caption);\n  }\n  // 5.React组件卸载过程\n  componentWillUnmount() {\n    // console.log('enter componentWillUnmount');\n  }\n  // 更新过程update\n  componentWillReceiveProps() {\n    // console.log('enter componentWillReceiveProps:' + this.props.caption);\n  }\n  // shouldComponentUpdate和render函数,是React生命周期函数中唯二两个要求有返回结果的函数\n  // render 函数的返回结果将用于构造DOM对象,\n  // 而shouldComponentUpdate函数返回一个布尔值,告诉React 库这个组件在这次更新过程中是否要继续\n  // 如果这个函数返回true,那就会继续更新过程，接下来调用 render 函数；反之,如果得到一个false ，那就立刻停止更新过程，也就不会引发后续的渲染了\n  shouldComponentUpdate(nextProps, nextState) {\n    // console.log('enter shouldComponentUpdate:' + this.props.caption);\n    // return false;\n    // return true;\n    return (nextProps.caption !== this.props.caption) || (nextState.count !== this.state.count);\n  }\n  // shouldComponentUpdate返回true的时候才会继续进入后续步骤的。\n  // update引起的render之前的更新，但是不会引起页面的渲染也就是DOM被装载之前\n  componentWillUpdate() {\n    // console.log('enter componentWillUpdate:' + this.props.caption);\n  }\n  // render - update 引发render函数，不会渲染，页面返回jsx描述结构交给react库来进行渲染\n  // render 返回的jsx描述结构渲染， DOM装载之后进行的操作\n  componentDidUpdate() {\n    // console.log('enter componentDidUpdate:' + this.props.caption);\n  }\n}\nCounter.propTypes = {\n  caption: PropTypes.string.isRequired,\n  initValue: PropTypes.number,\n  onUpdate: PropTypes.func\n};\nCounter.defaultProps = {\n  initValue: 0,\n  onUpdate: f => f\n};\nexport default Counter;\n","import React, { Component } from 'react';\nimport Counter from './Counter';\n\nimport { Button } from 'antd';\n\nclass ControlPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.onCounterUpdate = this.onCounterUpdate.bind(this);\n    this.initValues = [0, 10, 20];\n    const initSum = this.initValues.reduce((a,b) => a + b, 0);\n    this.state = {\n      sum: initSum\n    };\n  }\n  onCounterUpdate(newValue, previousValue){\n    const valueChange = newValue - previousValue;\n    this.setState({sum: this.state.sum + valueChange});\n  }\n  render() {\n    return (\n      <div className=\"region\">\n        <Counter onUpdate={this.onCounterUpdate} caption=\"First\" />\n        <Counter onUpdate={this.onCounterUpdate} caption=\"Second\" initValue={this.initValues[1]} />\n        <Counter onUpdate={this.onCounterUpdate} caption=\"Third\" initValue={this.initValues[2]} />\n        <Button type=\"primary\" ghost onClick={() => this.forceUpdate()}>\n          Click me to repaint!\n        </Button>\n        <div>Total Count: {this.state.sum}</div>\n      </div>\n    );\n  }\n}\n\nexport default ControlPanel;\n","import React, { Component } from 'react'\r\n// PropTypes之前在react中，现在15版本之后，从react中分离出来单独一个插件\r\nimport PropTypes from 'prop-types'\r\nimport './AddColorForm.scss'\r\n\r\nimport { Input } from 'antd'\r\n// ES6类组件\r\nexport default class AddColorForm extends Component {\r\n  // Solution 2【1】 - 可以不写，上线的时候可以用插件删除-减少代码\r\n  static propTypes = {\r\n    onNewColor: PropTypes.func\r\n  }\r\n  static defaultProps = {\r\n    onNewColor: f => f\r\n  }\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      _title: '',\r\n      _color: '#000000'\r\n    }\r\n    this.submit = this.submit.bind(this)\r\n    this.onChangeTitle = this.onChangeTitle.bind(this)\r\n    this.onChangeColor = this.onChangeColor.bind(this)\r\n  }\r\n  onChangeTitle(e) {\r\n    this.setState({ _title: e.target.value });\r\n  }\r\n  onChangeColor(e) {\r\n    this.setState({ _color: e.target.value });\r\n  }\r\n  submit(e) {\r\n    // const { _title, _color } = this.refs;\r\n    const { _title, _color } = this.state;\r\n    // e.preventDefault();\r\n    // 该组件是否在调用一个未定义的值\r\n    // Solution 1.通过检查函数属性的存在性来避免\r\n    /* if(this.props.onNewColor){\r\n      this.props.onNewColor(_title.value, _color.value);\r\n    } */\r\n    this.props.onNewColor(_title, _color);\r\n    // Solution 2 在组件的propTypes和defaultProps中定义该函数属性\r\n    // 此处方法有两种写法 【1】使用ts的static设置两个对象值【2】直接定义组件的两个对象值\r\n    // _title = '';\r\n    // _color = '#000000';\r\n    this.setState({ _title: ''});\r\n    this.setState({ _color: '#000000' });\r\n    // _title.focus();\r\n  }\r\n  render() {\r\n    return (\r\n      <form className=\"add-color\" onSubmit={this.submit}>\r\n        {/* <Input ref=\"_title\" */}\r\n        <Input ref={node => this._titleInput = node}\r\n               type=\"text\"\r\n               value={this.state._title}\r\n               onChange={this.onChangeTitle}\r\n               placeholder=\"color title...\" required/>\r\n        {/* <Input ref=\"_color\" */}\r\n        <Input ref={node => this._colorInput = node}\r\n               value={this.state._color}\r\n               onChange={this.onChangeColor}\r\n               type=\"color\" required/>\r\n        <button type=\"primary\">ADD</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n// Solution 2【2】 - 可以不写，上线的时候可以用插件删除-减少代码\r\n/* AddColorForm.propTypes = {\r\n    onNewColor: PropTypes.func\r\n}\r\n\r\nAddColorForm.defaultProps = {\r\n    onNewColor: f=>f\r\n} */\r\n","import React, { Component } from 'react'\r\n\r\nexport default class StarRating extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      totalStars: 5\r\n    }\r\n    // this.onClick = this.onClick.bind(this)\r\n    this.onRate = this.onRate.bind(this)\r\n  }\r\n  // 外边的onRate是组件的onRate, 方法里边的onRate是props的onRate\r\n  onRate(i) {\r\n    this.props.onRate(i+1)\r\n  }\r\n  /* onClick(i) {\r\n    console.log(i);\r\n    this.props.onRate(i);\r\n  } */\r\n  render() {\r\n    // const { onRate } = this\r\n    const { starsSelected,starColor } = this.props\r\n    const { totalStars } = this.state\r\n    return <div className=\"star-rating\">\r\n        {[...Array(totalStars)].map((n, i) =>\r\n          <div key={i} className={(i<starsSelected) ? \"star selected\" : \"star\"}\r\n                onClick={()=> this.onRate(i)} style={(i<starsSelected) ? {backgroundColor: starColor} : void(0)}>\r\n          </div>\r\n        )}\r\n        <p>{starsSelected} of {totalStars} stars</p>\r\n    </div>\r\n  }\r\n}\r\n","import React from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport StarRating from './StarRating'\r\nimport './ColorList.scss'\r\n\r\nimport { Button } from 'antd'\r\n\r\n// 无状态函数式组价\r\nconst ColorList = ({ colors=[], onRemove=f=>f, rating = 0, onRate=f=>f }) =>\r\n  <div className=\"color-list\">\r\n    {\r\n      colors.length === 0 ? <p>没有ColorList列表数据</p> :\r\n      colors.map((color, i) =>{\r\n        // 此处 {title, color} = color 会有问题，我被坑了好久\r\n        const { title, hue, rating, id} = color;\r\n        console.log(colors);\r\n        return <section className=\"color\" key={color.id}>\r\n            <h1>{title}</h1>\r\n            <Button type=\"danger\" ghost size=\"small\" onClick={()=>onRemove(id)}>X</Button>\r\n            <div className=\"color\"\r\n                 style={{ backgroundColor: hue }}>\r\n            </div>\r\n            {/* StarRating使用ES6类组件 */}\r\n            {/* <StarRating starsSelected={rating} onRate={onRate}/> */}\r\n            {/* 传参写成下边的格式 */}\r\n            <StarRating starsSelected={rating} starColor={hue} onRate={(rating) => onRate(color.id, rating)}/>\r\n        </section>\r\n      })\r\n    }\r\n  </div>\r\n// Colorlist已经给出onRemove的默认值是个函数，此处可以不写\r\n/* ColorList.propTypes = {\r\n  onRemove: PropTypes.func\r\n} */\r\nexport default ColorList\r\n","import React, { Component } from 'react'\r\nimport AddColorForm from './AddColorForm'\r\nimport ColorList from './ColorList'\r\nimport { v4 } from 'uuid'\r\n\r\nexport default class ColorOrganizer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      colors: []\r\n    }\r\n    this.addColor = this.addColor.bind(this)\r\n    this.onRate = this.onRate.bind(this)\r\n    this.removeColor = this.removeColor.bind(this)\r\n  }\r\n  addColor(title, color) {\r\n    // console.log(title.value, color.value);\r\n    console.log(title, color);\r\n    this.setState((prevState, props) => ({\r\n      // 扩展运算符合并数组\r\n      colors: [\r\n        ...prevState.colors,\r\n        {\r\n          id: v4(),\r\n          // title: title.value,\r\n          // color: color.value,\r\n          title,\r\n          // 此处为color，导致ColorList通过解构赋值时与color冲突\r\n          // color,\r\n          hue: color,\r\n          rating: 0\r\n        }\r\n      ]\r\n    }))\r\n    /* this.setState((prevState, props) => {\r\n      // 扩展运算符合并数组\r\n      return ({colors: [\r\n        ...prevState.colors,\r\n        {\r\n          id: v4(),\r\n          // title: title.value,\r\n          // hue: color.value,\r\n          title,\r\n          color,\r\n          rating: 0\r\n        }\r\n      ]})\r\n    },()=>{console.log(this.state)}) */\r\n  }\r\n  removeColor(id) {\r\n    this.setState((prevState, props)=>({\r\n      colors: prevState.colors.filter(color => color.id !== id)\r\n    }))\r\n  }\r\n  onRate(id, rating) {\r\n    console.log(id, rating);\r\n    this.setState((prevState, props) => ({\r\n      colors: prevState.colors.map(color => (color.id === id) ? {...color, rating} : color)\r\n    }))\r\n  }\r\n  render() {\r\n    const { colors } = this.state\r\n    return (\r\n      <div className=\"region\">\r\n        {/* AddColorForm使用ES6类组件 */}\r\n        <AddColorForm onNewColor={this.addColor} />\r\n        {/* ColorList使用无状态函数式组件 */}\r\n        <ColorList onRemove={this.removeColor} colors={colors} onRate={this.onRate}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom'\r\n\r\nimport ClickCounter from '../component/ClickCounter/ClickCounter';\r\nimport ControlPanel from '../component/ControlPanel/ControlPanel';\r\nimport ColorOrganizer from '../component/ColorOrganizer/ColorOrganizer';\r\n\r\nconst Routes = () => <HashRouter>\r\n  <div>\r\n    <ul>\r\n      <li><Link to=\"/\" >Index</Link></li>\r\n      <li><Link to=\"/ClickCounter\" >ClickCounter</Link></li>\r\n      <li><Link to=\"/ControlPanel\">ControlPanel</Link></li>\r\n      <li><Link to=\"/ColorOrganizer\">ColorOrganizer</Link></li>\r\n    </ul>\r\n    <Switch>\r\n      <Route exact path=\"/ClickCounter\" component={ClickCounter}/>\r\n      <Route path=\"/ControlPanel\" component={ControlPanel}/>\r\n      <Route path=\"/ColorOrganizer\" component={ColorOrganizer}/>\r\n    </Switch>\r\n  </div>\r\n</HashRouter>\r\nexport default Routes\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n// import ReactDOM from 'react-dom';\nimport { render } from 'react-dom';\nimport './style/index.scss';\n\nimport ClickCounter from './component/ClickCounter/ClickCounter';\nimport ControlPanel from './component/ControlPanel/ControlPanel';\nimport ColorOrganizer from './component/ColorOrganizer/ColorOrganizer';\n\nimport Routes from './config/Router';\n\n// import 'antd-mobile/dist/antd-mobile.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\nrender(\n    <div>\n        <ClickCounter />\n        <ControlPanel />\n        <ColorOrganizer />\n        <div>下边是添加路由的组件</div>\n        <Routes/>\n    </div>,\n    document.querySelector('#root')\n);\n// 动态加载js文件\nconst btn = document.getElementById('btn');\nbtn.onclick = () => {\n  import(/* webpackChunkName: \"dynamic\" */ './js/dynamic').then((module) => {\n    const fn = module.default;\n    fn();\n  });\n};\nif (module.hot) {\n  console.log('HMR');\n  module.hot.accept(() => {\n    render(\n      <div>\n          <ClickCounter />\n          <ControlPanel />\n          <ColorOrganizer />\n          <div>下边是添加路由的组件</div>\n          <Routes />\n      </div>,\n      document.querySelector('#root')\n    );\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}